===============================================================================
                    WB L0 - ИНСТРУКЦИЯ ПО ИСПОЛЬЗОВАНИЮ
===============================================================================

КРАТКОЕ ОПИСАНИЕ
----------------
Микросервис для получения данных через NATS Streaming, сохранения в 
PostgreSQL и отображения через веб-интерфейс.

ТЕХНОЛОГИИ
----------
- Go 1.21
- PostgreSQL 15
- NATS Streaming
- Docker & Docker Compose
- Vegeta

===============================================================================
                           БЫСТРЫЙ ЗАПУСК
===============================================================================

ШАГ 1: Скачать проект
git clone https://github.com/Misarrr/wb-l0.git
cd wb-l0

ШАГ 2: Запустить Docker
docker-compose up -d --build
Подожди 30 секунд.

ШАГ 3: Проверить статус
docker-compose ps
Все должны быть Up:
✅ wb-l0-postgres-1 (Up, healthy)
✅ wb-l0-nats-streaming-1 (Up)
✅ wb-l0-app-1 (Up)

ШАГ 4: Открыть сайт
http://localhost:8080

Ввести: b563feb7b2b84b6test


===============================================================================
                          ТЕСТИРОВАНИЕ
===============================================================================

1. ЗАПУСК АВТОТЕСТОВ
   ------------------
   
   Команда:
   go test -v handlers_test.go handlers.go cache.go models.go database.go
   
   Результат: все 8 тестов должны пройти успешно (PASS)


2. СТРЕСС-ТЕСТ (СОБСТВЕННЫЙ)
   --------------------------
   
   Команда:
   go run stress.go
   
   Результат: покажет RPS, успешные запросы, время ответа


3. СТРЕСС-ТЕСТ ЧЕРЕЗ VEGETA (WINDOWS)
   ------------------------------------
   Введите cmd и далее вводите следующие команды:
   - Легкий тест (1000 RPS, 10 секунд):
     vegeta.exe attack -duration=10s -rate=1000 -targets=targets.txt | vegeta.exe report
   
   - Средний тест (2000 RPS, 20 секунд):
     vegeta.exe attack -duration=20s -rate=2000 -targets=targets.txt | vegeta.exe report
   
   - Тяжелый тест (5000 RPS, 30 секунд):
     vegeta.exe attack -duration=30s -rate=5000 -targets=targets.txt | vegeta.exe report


===============================================================================
                        РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ
===============================================================================

АВТОТЕСТЫ
---------
✓ 8 из 8 тестов пройдено
✓ Покрытие: HTTP handlers, cache, validation


СТРЕСС-ТЕСТЫ (СОБСТВЕННЫЙ GO-СКРИПТ)
------------------------------------
✓ 10,000 запросов - 100% успешных
✓ RPS: ~1650 запросов/сек
✓ Среднее время ответа: 600 микросекунд


СТРЕСС-ТЕСТЫ (VEGETA)
---------------------
Тест 1 (1000 RPS):
  - Запросов: 9,997
  - Успех: 100%
  - Среднее время: 0.7 мс

Тест 2 (2000 RPS):
  - Запросов: 39,986
  - Успех: 100%
  - Среднее время: 1.0 мс

Тест 3 (10000 RPS):
  - Запросов: 99,915
  - Успех: 100%
  - Среднее время: 3.5 мс

Тест 4 (5000 RPS, 30 сек):
  - Запросов: 149,967
  - Успех: 100%
  - Среднее время: 1.9 мс


===============================================================================
                         СТРУКТУРА ПРОЕКТА
===============================================================================

wb-l0/
├── main.go              - Точка входа приложения
├── models.go            - Структуры данных (Order, Delivery, Payment, Item)
├── cache.go             - Кэш в памяти
├── database.go          - Работа с PostgreSQL
├── handlers.go          - HTTP обработчики
├── publisher.go         - Публикация сообщений в NATS
├── handlers_test.go     - Автотесты
├── stress.go            - Стресс-тест
├── docker-compose.yml   - Конфигурация Docker Compose
├── Dockerfile           - Docker образ приложения
├── init.sql             - Инициализация базы данных
├── model.json           - Пример заказа
├── targets.txt          - Цели для Vegeta
├── static/
│   └── index.html       - Веб-интерфейс
├── go.mod               - Go зависимости
├── go.sum               - Контрольные суммы зависимостей
└── README.txt           - Документация 


===============================================================================
                      ВОЗМОЖНЫЕ ПРОБЛЕМЫ
===============================================================================

ПРОБЛЕМА: Приложение не подключается к БД
-----------------------------------------
Решение 1: Проверить что PostgreSQL запущен
  docker-compose ps (должен быть Up)

Решение 2: Посмотреть логи
  docker-compose logs postgres


ПРОБЛЕМА: NATS Streaming не подключается
----------------------------------------
Решение: Проверить логи и перезапустить
  docker-compose logs nats-streaming
  docker-compose restart


ПРОБЛЕМА: Порт 8080 уже занят
------------------------------
Решение: Остановить другие сервисы или изменить порт в docker-compose.yml


===============================================================================
                     ПОЛЕЗНЫЕ КОМАНДЫ ДЛЯ DOCKER
===============================================================================

Посмотреть запущенные контейнеры:
  docker-compose ps

Посмотреть логи всех сервисов:
  docker-compose logs

Посмотреть логи конкретного сервиса:
  docker-compose logs app

Остановить и удалить контейнеры:
  docker-compose down

Остановить и удалить контейнеры вместе с volumes:
  docker-compose down -v

Перезапустить сервисы:
  docker-compose restart

Пересобрать образы:
  docker-compose build --no-cache


