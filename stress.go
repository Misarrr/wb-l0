package main

import (
	"fmt"
	"net/http"
	"sync"
	"time"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
	totalRequests := 10000 // –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
	concurrentUsers := 100 // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	url := "http://localhost:8080/api/order?id=b563feb7b2b84b6test"

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞\n")
	fmt.Printf("   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d\n", totalRequests)
	fmt.Printf("   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö: %d\n", concurrentUsers)
	fmt.Printf("   URL: %s\n\n", url)

	// –°—á—ë—Ç—á–∏–∫–∏
	var (
		successCount int
		errorCount   int
		mu           sync.Mutex
		wg           sync.WaitGroup
	)

	startTime := time.Now()

	// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
	jobs := make(chan int, totalRequests)
	for i := 0; i < totalRequests; i++ {
		jobs <- i
	}
	close(jobs)

	// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
	for i := 0; i < concurrentUsers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for range jobs {
				resp, err := http.Get(url)
				mu.Lock()
				if err != nil || resp.StatusCode != 200 {
					errorCount++
				} else {
					successCount++
				}
				mu.Unlock()
				if resp != nil {
					resp.Body.Close()
				}
			}
		}()
	}

	wg.Wait()
	duration := time.Since(startTime)

	// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
	fmt.Printf("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
	fmt.Printf("   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %d\n", successCount)
	fmt.Printf("   ‚ùå –û—à–∏–±–æ–∫: %d\n", errorCount)
	fmt.Printf("   ‚è±Ô∏è  –í—Ä–µ–º—è: %v\n", duration)
	fmt.Printf("   üìà RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫): %.2f\n", float64(totalRequests)/duration.Seconds())
	fmt.Printf("   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v\n", duration/time.Duration(totalRequests))
}
